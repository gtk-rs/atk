// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Object;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Window(Interface<ffi::AtkWindow>) @requires Object;

    match fn {
        get_type => || ffi::atk_window_get_type(),
    }
}

pub const NONE_WINDOW: Option<&Window> = None;

pub trait AtkWindowExt: 'static {
    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_create<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_deactivate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_maximize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_minimize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_move<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_resize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_restore<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Window>> AtkWindowExt for O {
    fn connect_activate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"activate\0".as_ptr() as *const _,
                transmute(activate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_create<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"create\0".as_ptr() as *const _,
                transmute(create_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_deactivate<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"deactivate\0".as_ptr() as *const _,
                transmute(deactivate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_destroy<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"destroy\0".as_ptr() as *const _,
                transmute(destroy_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_maximize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"maximize\0".as_ptr() as *const _,
                transmute(maximize_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_minimize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"minimize\0".as_ptr() as *const _,
                transmute(minimize_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_move<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"move\0".as_ptr() as *const _,
                transmute(move_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_resize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"resize\0".as_ptr() as *const _,
                transmute(resize_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_restore<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"restore\0".as_ptr() as *const _,
                transmute(restore_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn activate_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn create_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn deactivate_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn destroy_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn maximize_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn minimize_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn move_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn resize_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn restore_trampoline<P>(this: *mut ffi::AtkWindow, f: glib_ffi::gpointer)
where P: IsA<Window> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Window::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for Window {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Window")
    }
}
